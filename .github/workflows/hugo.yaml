# Sample workflow for building and deploying a Hugo site to GitHub Pages
name: Deploy Hugo site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    outputs:
      jsonUrls: ${{ steps.collect_urls.outputs.jsonUrls }}
    env:
      HUGO_VERSION: 0.121.2
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb
      - name: Install Dart Sass
        run: sudo snap install dart-sass
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4
      - name: Install Node.js dependencies
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"
      - name: Build with Hugo
        env:
          # For maximum backward compatibility with Hugo modules
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          hugo \
            --gc \
            --minify \
            --baseURL "${{ steps.pages.outputs.base_url }}/"
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./public
          # Neuer Schritt zum Sammeln der JSON-URLs
      - name: Collect JSON URLs
        id: collect_urls
        run: |
          echo 'Collecting JSON URLs...'
          urls=$(find public/projects -name "*.json" -exec echo "${{ steps.pages.outputs.base_url }}/{}/" \;)
          echo "Collected URLs: $urls"
          if [ -z "$urls" ]; then
            echo "No URLs found"
          else
            echo 'JSON_URLS<<EOF' >> "$GITHUB_OUTPUT"
            echo "$urls" >> "$GITHUB_OUTPUT"
            echo 'EOF' >> "$GITHUB_OUTPUT"
          fi




  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v3
      - name: List files in working directory
        run: ls -la

      # Neuer Schritt zum Sammeln und Senden der JSON-URLs nach dem Deployment
      - name: Collect and send JSON URLs to Murmurations
        run: |
          echo "Waiting for deployment to complete..."
          sleep 10
          echo "urls=${{ needs.build.outputs.jsonUrls }}"
          echo "Sending JSON URLs to API..."
          for url in ${{ needs.build.outputs.jsonUrls }}
          do
            echo "Sending URL: $url"
            response=$(curl -s -X 'POST' \ 'https://test-index.murmurations.network/v2/nodes' \ -H 'accept: application/json' \ -H 'Content-Type: application/json' \ -d '{ "profile_url": $url }')
            echo "API Response: $response"
          done



